package src;

import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class Followers {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String input = scanner.nextLine();
        Map<String, Integer> comments = new HashMap<>();
        Map<String, Integer> likes = new HashMap<>();

        while (!"Log out".equals(input)) {

            String[] tokens = input.split(": ");
            String command = tokens[0];
            String userName = tokens[1];

            if ("New follower".equals(command)) {
                comments.putIfAbsent(userName, 0);
                likes.putIfAbsent(userName, 0);
            } else if ("Like".equals(command)) {
                int newLikes = Integer.parseInt(tokens[2]);
                if (likes.containsKey(userName)) {
                    int currLikes = likes.get(userName);
                    likes.put(userName, currLikes + newLikes);
                } else {
                    likes.put(userName, newLikes);
                    comments.put(userName, 0);
                }
            } else if ("Comment".equals(command)) {
                if (comments.containsKey(userName)) {
                    int currComments = comments.get(userName);
                    comments.put(userName, currComments + 1);
                } else {
                    comments.put(userName, 1);
                    likes.put(userName, 0);
                }
            } else if ("Blocked".equals(command)) {
                if (comments.containsKey(userName)) {
                    comments.remove(userName);
                    likes.remove(userName);
                } else {
                    System.out.println(String.format("%s doesn't exist.", userName));
                }
            }
            input = scanner.nextLine();
        }
        System.out.println(String.format("%d followers", likes.size()));
        likes.entrySet()
                .stream()
                .sorted((a, b) -> {
                    int result = b.getValue().compareTo(a.getValue());
                    if (result == 0) {
                        result = a.getKey().compareTo(b.getKey());
                    }
                    return result;
                })
                .forEach(e -> System.out.println(String.format("%s: %d",
                        e.getKey(), e.getValue() + comments.get(e.getKey()))));
    }
}
